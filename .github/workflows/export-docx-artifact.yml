<!-- ============================= -->
<!-- CARÁTULA (formato ejemplo)   -->
<!-- ============================= -->

<p style="text-align:center; line-height:1.5; font-size:12pt;">
  <strong>Universidad Mariano Galvez de Guatemala</strong><br/>
  <span>Ingeniería En Sistemas de Información</span><br/>
  <span>Sede Chiquimulilla</span>
</p>

<p style="margin: 60pt 0;"></p>

<h1 style="text-align:center; font-size:20pt; margin:0;">
  Proyecto Final – Aseguramiento de la Calidad del Software
</h1>
<h3 style="text-align:center; font-size:14pt; margin-top:6pt; font-weight:normal;">
  Pruebas manuales y automatizadas sobre Buggy Cars Rating (https://buggy.justtestit.org/) con Playwright
</h3>

<p style="margin: 72pt 0;"></p>

<p style="font-size:12pt; line-height:1.5;">
  <strong>Estudiante:</strong> Marco Tulio Lara Salazar<br/>
  <strong>Carnet:</strong> 1790-21-16467
</p>

<p style="margin: 72pt 0;"></p>

<p style="text-align:right; font-size:12pt;">
  Chiquimulilla, agosto de 2025
</p>

```{=openxml}
<w:p><w:r><w:br w:type="page"/></w:r></w:p>
```

<!-- ============================= -->
<!-- CUERPO DEL INFORME            -->
<!-- ============================= -->

# Proyecto Final – Aseguramiento de la Calidad del Software
Pruebas manuales y automatizadas sobre Buggy Cars Rating (https://buggy.justtestit.org/) con Playwright

Autor: Marco Tulio Lara Salazar  
Curso: Aseguramiento de la Calidad del Software  
Fecha: Octubre 2025  
Repositorio: https://github.com/tulio67/ProyectoFinal  
Branch por defecto: master  
Idioma principal: JavaScript

---

Tabla de contenido (se generará automáticamente con --toc)

---

## 1. Resumen ejecutivo

Este informe presenta la evaluación integral de calidad realizada sobre la aplicación web “Buggy Cars Rating”, abarcando los flujos críticos de Registro, Autenticación (Login/Logout), Perfil, Votación y Comentarios, así como la navegación general. Se combinaron pruebas manuales (casos sistemáticos y exploración guiada por riesgos) con pruebas automatizadas end‑to‑end en tres navegadores (Chrome, Firefox y Safari) mediante Playwright en Windows 11 y macOS Sequoia. Los objetivos fueron verificar corrección funcional, robustez de validaciones, seguridad de autenticación y experiencia de usuario con foco en rendimiento percibido.

Principales hallazgos:
- Validaciones incompletas en campos clave (riesgo de integridad y UX).
- Ausencia de bloqueo ante múltiples intentos de login fallidos (riesgo de fuerza bruta).
- Expiración de sesión no estricta (exposición en equipos compartidos).
- Manejo mejorable de recursos inexistentes/rutas (UX, claridad de errores).
- Retrasos en carga de imágenes/íconos (percepción de rendimiento).

Métricas de automatización:
- 93 casos: 75 aprobados (80.6%).
- 7 especificaciones, 3 navegadores, reporter HTML y trazas en reintentos.

Recomendación prioritaria: autenticación defensiva (rate limiting, captcha progresivo, expiración estricta de sesión), validación server‑side completa y optimización de recursos gráficos (formatos modernos, lazy‑loading, placeholders). Estas acciones reducen riesgos de seguridad y elevan la percepción de calidad.

---

## 2. Abstract (English)

This report delivers a comprehensive quality assessment of “Buggy Cars Rating”, covering Registration, Authentication, Profile, Rating and Comments, plus general navigation. We combined structured manual testing (including risk‑based exploration) with Playwright end‑to‑end automation across Chrome, Firefox, and Safari on Windows 11 and macOS Sequoia. Goals included functional correctness, robust input handling, secure authentication and user experience with an emphasis on perceived performance. Key findings: incomplete validations, missing brute‑force mitigations, inconsistent session expiration, suboptimal handling of nonexistent resources, and noticeable delays on image/icon loading. Automated metrics: 93 tests, 75 passed (80.6%). We recommend prioritizing defensive authentication, completing server‑side validations and optimizing graphical assets.

---

## 3. Introducción

La calidad del software integra funcionalidad, seguridad y experiencia del usuario. Este proyecto adopta un enfoque práctico para evaluar dichas dimensiones en “Buggy Cars Rating”, un sistema con casos de uso representativos que permiten medir con claridad validaciones, autenticación, navegación y rendimiento percibido. Además, se busca aportar una guía de mejora priorizada, aplicable a proyectos académicos y profesionales.

Motivación:
- Entregar evidencia objetiva de la situación actual.
- Proponer mejoras accionables alineadas a buenas prácticas (OWASP, UX, CI/CD).
- Consolidar una base confiable para futuras extensiones funcionales.

Aporte:
- Suite de pruebas automatizadas con Playwright, paralela y multiplataforma.
- Diseño metodológico que equilibra pruebas manuales y automatización.
- Reporte con recomendaciones priorizadas por impacto y esfuerzo.

---

## 4. Marco teórico y estado del arte

### 4.1. Verificación y validación
- Verificación: “¿Construimos bien el producto?” (conformidad técnica).
- Validación: “¿Construimos el producto correcto?” (adecuación a la necesidad).

### 4.2. Diseño de pruebas funcionales
- Particiones equivalentes y valores límite para optimizar cobertura.
- Tablas de decisión frente a reglas y combinaciones.
- Pruebas negativas: entradas inválidas, límites, rutas inexistentes.

### 4.3. Seguridad web (OWASP)
- Riesgos frecuentes: XSS, inyección, autenticación rota, sesión débil, exposición de datos.
- Controles: saneamiento/normalización, codificación de salida, MFA, políticas de contraseñas, bloqueo por intentos, headers de seguridad, auditoría.

### 4.4. Automatización E2E con Playwright
- Soporte nativo para Chromium/Firefox/WebKit, trazas, paralelización, aislamiento por contexto.
- Selectores robustos (data‑testid) vs. selectores frágiles por texto.
- Idóneo para regresión continua y validación cross‑browser.

### 4.5. Métricas de calidad
- Tasa de éxito, densidad de defectos, flakiness, cobertura por módulo.
- UX/Rendimiento: LCP, CLS, TTI como guía pragmática.

---

## 5. Metodología y diseño del estudio

### 5.1. Enfoque
- Manual: casos por módulo y exploración guiada por riesgos (seguridad/UX).
- Automatizado: Playwright con reporter HTML y trazas en fallos (on‑first‑retry).

### 5.2. Alcance y entornos
- Módulos: Registro, Autenticación, Perfil, Votación, Comentarios, Navegación.
- SO: Windows 11 y macOS Sequoia; navegadores: Chrome, Firefox, Safari.

### 5.3. Datos de prueba
- Usuarios válidos/ inválidos; contraseñas con diferentes complejidades.
- Entradas maliciosas controladas (XSS/SQLi) para verificación de bloqueo.
- Escenarios con sesión activa/inactiva para validar expiración.

### 5.4. Procedimiento
- Ciclo PDCA: planificar → ejecutar → verificar → ajustar.
- Evidencias: reportes HTML, capturas y trazas en reintentos fallidos.

---

## 6. Arquitectura técnica de pruebas y configuración

### 6.1. Repositorio
- Documentación: README.md, INFORME_TECNICO.md, RESUMEN_EJECUTIVO.md.
- Automatización: playwright.config.js, tests/, package.json.
- Informe: docs/TESIS_ProyectoFinal_Marco_Tulio.md (exportable a DOCX vía Actions).

### 6.2. Playwright (síntesis)
- testDir: ./tests, fullParallel: true, retries (CI): 2, reporter: html,
- projects: chromium, firefox, webkit, use.trace: on‑first‑retry.

### 6.3. Selección de selectores
- Priorizar data‑testid; evitar texto visible y jerarquías frágiles.

### 6.4. Aislamiento
- Contextos por test, limpieza de storage/cookies entre escenarios críticos.

---

## 7. Plan de pruebas, cobertura y trazabilidad

Objetivos:
- Verificar reglas de negocio y validaciones.
- Evaluar autenticación defensiva (rate limiting, expiración de sesión).
- Comprobar mensajes claros y estados de UI coherentes.

Trazabilidad (muestra):
- R‑REG‑001 Campos obligatorios → Casos A2, A3, A7, A8.
- R‑AUT‑002 Bloqueo por intentos → B7.
- R‑SEC‑003 XSS/SQLi bloqueados → F4, H1/H2.
- R‑PERF‑004 Tiempos de imagen aceptables → G2.

Criterios transversales:
- Mensajería clara (éxito/error), localización consistente.
- Validaciones cliente/servidor simétricas.
- Respuestas HTTP coherentes (sin “loading” indefinido).
- Persistencia/normalización correctas en campos clave.

---

## 8. Casuística ampliada y criterios de aceptación

- Username: trimming, unicidad post‑normalización, listas denegadas.
- Contraseñas: longitud ≥ 10, mezcla de tipos, historial (N anteriores), prohibir “misma actual”.
- Sesión: expiración 15–30 min por inactividad; logout invalida sesión.
- Votación/Comentarios: confirmaciones explícitas; no duplicidad; límites de longitud; XSS bloqueado.
- Navegación: modelos inexistentes → 404 con fallback comprensible.

---

## 9. Seguridad y cumplimiento (OWASP, autenticación defensiva)

Validación/saneamiento:
- Estrategia “whitelist” por campo, tipos fuertes (number/email), normalización de espacios/casos.

Autenticación:
- Rate limiting por IP/usuario, backoff exponencial y captcha tras 5–10 fallos.
- Recuperación segura de contraseña: token de un solo uso, expiración corta, hashing robusto.

Headers de seguridad recomendados:
- Content‑Security‑Policy, X‑Content‑Type‑Options, X‑Frame‑Options, Referrer‑Policy, HSTS.

Política de contraseñas:
- Complejidad + historial + bloqueo “igual a la actual” + invalidación de sesiones tras cambio.

---

## 10. Rendimiento percibido y experiencia de usuario

Observación (ERRO‑13): retrasos en imágenes/íconos.
- Acciones: WebP/AVIF, redimensión/compresión, lazy‑loading, placeholders/skeletons, precarga de recursos críticos.
- Métricas guía: LCP < 2.5s, CLS < 0.1; instrumentar con Lighthouse y RUM.

Caché/CDN:
- Cache‑Control/ETag, CDN con edge caching, invalidación selectiva.

---

## 11. Resultados y análisis estadístico ampliado

Síntesis:
- 93 casos automatizados, 75 aprobados (80.6%).
- Por categoría (ilustrativo): Registro 85%, Autenticación 70%, Perfil 78%, Votación/Comentarios 82%, Navegación 76%.
- Cross‑browser: varianza baja; fallos asociados a selectores/UX y políticas de sesión.

Tendencias:
- Fallos de validación concentran riesgos de integridad y UX.
- Mayor riesgo de seguridad en autenticación defensiva incompleta.

---

## 12. Análisis comparativo de herramientas (ampliado)

- Selenium vs Playwright:
  - Playwright: contextos aislados, trazas, selector engine moderno, mejor estabilidad en E2E paralelos.
  - Selenium: ecosistema maduro, amplia comunidad; mayor configuración para estabilidad en paralelo.
- Decisión: Playwright por velocidad, trazabilidad y soporte multi‑navegador integrado.

---

## 13. Diseño detallado de casos (muestras representativas)

Registro:
- Reglas de campos obligatorios, longitudes, trimming, caracteres válidos, unicidad.
- Contraseñas: mezcla de tipos, coincidencia, rechazo de débiles.

Autenticación:
- Válidas/ inválidas; intentos múltiples con bloqueo; expiración por inactividad; logout.

Perfil:
- Tipado de campos (numérico/select), límites, mensajes claros por validación.

Votación/Comentarios:
- No duplicidad, límites de longitud, XSS bloqueado, feedback de éxito/error.

Navegación:
- Rutas inexistentes y fallback; manejo de recursos faltantes (imágenes, 404).

---

## 14. Gestión de riesgos y amenazas a la validez

Riesgos priorizados:
- R1: Fuerza bruta sin bloqueo (alto).
- R2: Recuperación de credenciales ausente/limitada (alto).
- R3: Expiración de sesión no estricta (medio).
- R4: Imágenes lentas (alto UX).

Amenazas a la validez:
- Entorno no controlado (internet público).
- Métricas de rendimiento basadas en percepción/herramientas ligeras.
- Sin acceso a backend/logs: inferencias por observación.

Mitigaciones:
- Repetición de escenarios críticos en distintos horarios/navegadores.
- Evidencias con reportes y trazas; revisión cruzada de resultados.

---

## 15. Recomendaciones y hoja de ruta

Corto plazo (0–2 semanas):
- Rate limiting + captcha; “Forgot password/username”.
- Validación server‑side en campos críticos; normalización y saneamiento.

Mediano plazo (2–6 semanas):
- Historial de contraseñas; prohibir “misma actual”.
- Expiración de sesión y rotación de tokens/cookies.
- Optimización de imágenes: WebP/AVIF; lazy‑loading; placeholders; CDN.

Largo plazo:
- CI con Lighthouse/axe; dashboards de calidad.
- Pruebas móviles en dispositivos reales y perfiles de red.

KPIs:
- ≥ 95% éxito en suites críticas.
- LCP P75 < 2.5s; 0 incidentes por brute force.
- MTTR P1 < 24h; reducción de defectos reabiertos.

---

## 16. Conclusiones

El sistema presenta una base funcional sólida y defensas eficaces frente a XSS/SQLi, pero requiere fortalecer la autenticación defensiva (bloqueo por intentos y expiración estricta) y optimizar recursos visuales. Las acciones propuestas son de alto impacto/costo moderado y mejoran seguridad, confiabilidad y UX, habilitando un ciclo de entrega más predecible y con menor riesgo. La estrategia recomendada es implementar primero seguridad y validaciones críticas; luego optimizaciones de rendimiento y UX; finalmente, observabilidad y cobertura extendida.

---

## 17. Trabajo futuro

- Accesibilidad (WCAG) y performance budgets por sección.
- Telemetría en producción (RUM) y alertas de Core Web Vitals.
- Cobertura de dispositivos móviles y perfiles de red degradados.
- Internacionalización/localización y pruebas de contenido.
- Test impact analysis para priorizar regresiones.

---

## 18. Glosario

- LCP: Largest Contentful Paint.  
- TTI: Time to Interactive.  
- RUM: Real User Monitoring.  
- TTL: Time To Live (sesión/cookie).  
- CSP: Content Security Policy.

---

## 19. Referencias

- Playwright Test – Documentation: https://playwright.dev/  
- Node.js – Documentation: https://nodejs.org/  
- OWASP Top 10: https://owasp.org/www-project-top-ten/  
- OWASP ASVS: https://owasp.org/www-project-application-security-verification-standard/  
- WCAG 2.2 – W3C: https://www.w3.org/WAI/standards-guidelines/wcag/  
- Web.dev (Core Web Vitals): https://web.dev/vitals/  
- GitHub Actions – Docs: https://docs.github.com/actions  
- Buggy Cars Rating (SUT): https://buggy.justtestit.org/

---

## 20. Anexos

### Anexo A. Casos de prueba (resumen ampliado)
- Registro: campos obligatorios, trimming, formatos, longitudes, duplicados; contraseñas débiles/no coincidentes.  
- Autenticación: intentos múltiples, bloqueo, expiración de sesión.  
- Perfil: tipado estricto, límites de longitud y caracteres; mensajes claros.  
- Votación/Comentarios: duplicidad, límites, XSS, feedback.  
- Navegación: rutas inexistentes, 404 y recursos faltantes con fallback.

### Anexo B. Bitácora de defectos (ERRO‑001 a ERRO‑013)
- ERRO‑01: Envío con campos vacíos (Alta)  
- ERRO‑02: Username con caracteres especiales (Media)  
- ERRO‑03: Sesión no expira tras 30 min (Media)  
- ERRO‑04: Ausencia de “Forgot password/username” (Alta)  
- ERRO‑05: Sin bloqueo tras múltiples intentos (Alta)  
- ERRO‑06/07/08: Tipado/validaciones inconsistente (Baja/Media)  
- ERRO‑09/10: Reutilización/igual a la actual (Media)  
- ERRO‑11: Modelo inexistente sin manejo claro (Media)  
- ERRO‑12: Voto sin comentario sin mensaje adecuado (Baja)  
- ERRO‑13: Imágenes/íconos con carga lenta (Alta)

### Anexo C. Comandos útiles
```bash
# Ejecutar todas las pruebas
npx playwright test

# Ver reporte HTML
npx playwright show-report

# Ejecutar un archivo específico
npx playwright test login.spec.js
```

### Anexo D. Configuración Playwright (extractos)
- testDir: ./tests  
- fullParallel: true  
- retries (CI): 2  
- reporter: html  
- projects: chromium, firefox, webkit  
- trace: on-first-retry

---

Firmado:  
Marco Tulio Lara Salazar – Octubre 2025
